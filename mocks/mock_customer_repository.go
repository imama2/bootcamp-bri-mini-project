// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imama2/bootcamp-bri-mini-project/repositories (interfaces: CustomerRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/imama2/bootcamp-bri-mini-project/entities/customer"
)

// MockCustomerRepositoryInterface is a mock of CustomerRepositoryInterface interface.
type MockCustomerRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryInterfaceMockRecorder
}

// MockCustomerRepositoryInterfaceMockRecorder is the mock recorder for MockCustomerRepositoryInterface.
type MockCustomerRepositoryInterfaceMockRecorder struct {
	mock *MockCustomerRepositoryInterface
}

// NewMockCustomerRepositoryInterface creates a new mock instance.
func NewMockCustomerRepositoryInterface(ctrl *gomock.Controller) *MockCustomerRepositoryInterface {
	mock := &MockCustomerRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepositoryInterface) EXPECT() *MockCustomerRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerRepositoryInterface) CreateCustomer(arg0 *sql.Tx, arg1 entity.Customer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) CreateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).CreateCustomer), arg0, arg1)
}

// DeleteCustomerByID mocks base method.
func (m *MockCustomerRepositoryInterface) DeleteCustomerByID(arg0 *sql.Tx, arg1 entity.Customer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomerByID indicates an expected call of DeleteCustomerByID.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) DeleteCustomerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerByID", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).DeleteCustomerByID), arg0, arg1)
}

// GetAllCustomer mocks base method.
func (m *MockCustomerRepositoryInterface) GetAllCustomer(arg0 *sql.DB, arg1 entity.Customer, arg2 entity.Pagination) ([]entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomer", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomer indicates an expected call of GetAllCustomer.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) GetAllCustomer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomer", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).GetAllCustomer), arg0, arg1, arg2)
}

// GetCustomerByID mocks base method.
func (m *MockCustomerRepositoryInterface) GetCustomerByID(arg0 *sql.Tx, arg1 entity.Customer) (entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByID", arg0, arg1)
	ret0, _ := ret[0].(entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByID indicates an expected call of GetCustomerByID.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) GetCustomerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByID", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).GetCustomerByID), arg0, arg1)
}

// Pagination mocks base method.
func (m *MockCustomerRepositoryInterface) Pagination(arg0 *sql.DB, arg1 entity.Pagination) (entity.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pagination", arg0, arg1)
	ret0, _ := ret[0].(entity.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pagination indicates an expected call of Pagination.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) Pagination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pagination", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).Pagination), arg0, arg1)
}

// UpdateCustomerByID mocks base method.
func (m *MockCustomerRepositoryInterface) UpdateCustomerByID(arg0 *sql.Tx, arg1 entity.Customer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerByID indicates an expected call of UpdateCustomerByID.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) UpdateCustomerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerByID", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).UpdateCustomerByID), arg0, arg1)
}
