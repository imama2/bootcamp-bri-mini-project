// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imama2/bootcamp-bri-mini-project/repositories (interfaces: AccountRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/imama2/bootcamp-bri-mini-project/entities/account"
)

// MockAccountRepositoryInterface is a mock of AccountRepositoryInterface interface.
type MockAccountRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryInterfaceMockRecorder
}

// MockAccountRepositoryInterfaceMockRecorder is the mock recorder for MockAccountRepositoryInterface.
type MockAccountRepositoryInterfaceMockRecorder struct {
	mock *MockAccountRepositoryInterface
}

// NewMockAccountRepositoryInterface creates a new mock instance.
func NewMockAccountRepositoryInterface(ctrl *gomock.Controller) *MockAccountRepositoryInterface {
	mock := &MockAccountRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepositoryInterface) EXPECT() *MockAccountRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AccountAuthentication mocks base method.
func (m *MockAccountRepositoryInterface) AccountAuthentication(arg0 *sql.Tx, arg1 entity.Account) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountAuthentication", arg0, arg1)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountAuthentication indicates an expected call of AccountAuthentication.
func (mr *MockAccountRepositoryInterfaceMockRecorder) AccountAuthentication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountAuthentication", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).AccountAuthentication), arg0, arg1)
}

// AccountRegistration mocks base method.
func (m *MockAccountRepositoryInterface) AccountRegistration(arg0 *sql.Tx, arg1 entity.Account) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountRegistration", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountRegistration indicates an expected call of AccountRegistration.
func (mr *MockAccountRepositoryInterfaceMockRecorder) AccountRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountRegistration", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).AccountRegistration), arg0, arg1)
}

// ApprovalAdd mocks base method.
func (m *MockAccountRepositoryInterface) ApprovalAdd(arg0 *sql.Tx, arg1 entity.Approval) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalAdd", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalAdd indicates an expected call of ApprovalAdd.
func (mr *MockAccountRepositoryInterfaceMockRecorder) ApprovalAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalAdd", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).ApprovalAdd), arg0, arg1)
}

// DeleteAdminByID mocks base method.
func (m *MockAccountRepositoryInterface) DeleteAdminByID(arg0 *sql.Tx, arg1 entity.Account) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdminByID indicates an expected call of DeleteAdminByID.
func (mr *MockAccountRepositoryInterfaceMockRecorder) DeleteAdminByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminByID", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).DeleteAdminByID), arg0, arg1)
}

// GetAllAdmin mocks base method.
func (m *MockAccountRepositoryInterface) GetAllAdmin(arg0 *sql.DB, arg1 entity.Account, arg2 entity.Pagination) ([]entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmin indicates an expected call of GetAllAdmin.
func (mr *MockAccountRepositoryInterfaceMockRecorder) GetAllAdmin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmin", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).GetAllAdmin), arg0, arg1, arg2)
}

// GetAllApprovalAdmin mocks base method.
func (m *MockAccountRepositoryInterface) GetAllApprovalAdmin(arg0 *sql.Tx) ([]entity.Approval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllApprovalAdmin", arg0)
	ret0, _ := ret[0].([]entity.Approval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllApprovalAdmin indicates an expected call of GetAllApprovalAdmin.
func (mr *MockAccountRepositoryInterfaceMockRecorder) GetAllApprovalAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllApprovalAdmin", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).GetAllApprovalAdmin), arg0)
}

// Pagination mocks base method.
func (m *MockAccountRepositoryInterface) Pagination(arg0 *sql.DB, arg1 entity.Pagination) (entity.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pagination", arg0, arg1)
	ret0, _ := ret[0].(entity.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pagination indicates an expected call of Pagination.
func (mr *MockAccountRepositoryInterfaceMockRecorder) Pagination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pagination", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).Pagination), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockAccountRepositoryInterface) SignIn(arg0 *sql.Tx, arg1 entity.Token) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAccountRepositoryInterfaceMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).SignIn), arg0, arg1)
}

// UpdateAdminRegStatusByAdminID mocks base method.
func (m *MockAccountRepositoryInterface) UpdateAdminRegStatusByAdminID(arg0 *sql.Tx, arg1 entity.Approval) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminRegStatusByAdminID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdminRegStatusByAdminID indicates an expected call of UpdateAdminRegStatusByAdminID.
func (mr *MockAccountRepositoryInterfaceMockRecorder) UpdateAdminRegStatusByAdminID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminRegStatusByAdminID", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).UpdateAdminRegStatusByAdminID), arg0, arg1)
}

// UpdateAdminStatusByAdminID mocks base method.
func (m *MockAccountRepositoryInterface) UpdateAdminStatusByAdminID(arg0 *sql.Tx, arg1 entity.Account) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminStatusByAdminID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdminStatusByAdminID indicates an expected call of UpdateAdminStatusByAdminID.
func (mr *MockAccountRepositoryInterfaceMockRecorder) UpdateAdminStatusByAdminID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminStatusByAdminID", reflect.TypeOf((*MockAccountRepositoryInterface)(nil).UpdateAdminStatusByAdminID), arg0, arg1)
}
